avvio del VIRTUAL VENV 
$ source myvenv/bin/activate
$ myvenv/bin/activate

Comandi avvio server:
python manage.py runserver    
http://127.0.0.1:8000/admin




Comandi Git
$ git init
Initialized empty Git repository in ~/djangogirls/.git/
$ git config --global user.name "AndreaRito"
$ git config --global user.email email

git status 
restituisce informazioni riguardanti qualsiasi file non
tracciato/modificato/in staging, lo stato del branch e 
molto altro.

git commit -m "My Django Girls app, first commit"


collegare il repository Git sul tuo computer a quello su GitHub.
$ git remote add origin https://github.com/AndreaRito/my-first-blog.git  
$ git push -u origin master


AGGIORNARE Git
$ git status

Assicurati di essere nella directory djangogirls e diciamo a git di includere tutte le modifiche in questa directory:
$ git add --all .

Nota --all significa che git riconoscerà anche se hai eliminato dei files (di default riconosce solo i file nuovi o modificati). Ricorda anche (dal capitolo 3) che il . significa la directory attuale.
Prima di caricare tutti i file, proviamo a controllare cosa caricherà git (tutti i file che caricherà git ora appariranno in verde):
$ git status

Ci siamo quasi, ora è il momento di dirgli di salvare questa modifica nella cronologia. Gli daremo un "messaggio di commit" dove descriviamo ciò che abbiamo modificato. Puoi digitare tutto quello che vuoi a questo punto, sarebbe utile scrivere qualcosa di descrittivo in modo da ricordare in futuro cos'hai fatto.
$ git commit -m "Ho cambiato l'HTML per questo sito."

Quando hai finito, caricheremo (push) le nostre modifiche su Github:
$ git push




Pythonanywhere: configurare PythonAnywhere come web app
su nuovo bash, che gira su linux:

$ pip3.6 install --user pythonanywhere

configurare automaticamente la nostra applicazione da GitHub:
$ pa_autoconfigure_django.py https://github.com/Andrearito/my-first-blog.git


AGGIORNARE CODICE SU PythonAnywhere
Apri la pagina Console PythonAnywhere e vai alla tua Bash console (o iniziane una nuova). Quindi, esegui:

$ cd ~/andrearito.pythonanywhere.com
$ git pull

Attiva myvenv=  
workon andrearito.pythonanywhere.com

Mod CSS file
python manage.py collectstatic

Infine, fai un salto alla scheda Web https://www.pythonanywhere.com/web_app_setup/ e premi Reload sulla tua web app.




QUERYSETS: prompt di python ma con un po' di magia di Django
importare post:
- from blog.models import Post

visualizza tutit i post
- Post.objects.all()

Importiamo il modello User prima:
- from django.contrib.auth.models import User
- me = User.objects.get(username='andrearitondale')

creiamo un Post
- Post.objects.create(author=me, title='ciaooooo', text='Test')

Filtrare 
info per scrittore
- Post.objects.filter(author=me)
filtrare post che contengono la parola 'titolo' nel campo titolo
- Post.objects.filter(title__contains='title')
ottenere una lista di tutti i post pubblicati
- from django.utils import timezone
- Post.objects.filter(published_date__lte=timezone.now())

ottenere istanza del post prima creato (riga 82) e lo pubblico
- post = Post.objects.get(title="ciaooooo")
- post.publish()

Ordinare gli oggetti
in base al campo
- Post.objects.order_by('created_date')
- Post.objects.order_by('-created_date') invertiamo 
Come hai visto, alcuni metodi su Post.objects restituiscono un QuerySet. Gli stessi metodi possono a loro volta essere chiamati su un QuerySet, e poi restituiranno un nuovo QuerySet. Puoi anche combinare QuerySets concatenandole insieme:
- Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')

esciiii
exit()



selettori CSS http://www.w3schools.com/cssref/css_selectors.asp
